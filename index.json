[{"uri":"/fsdocs-binding-bug-repro/index.html","title":"The fslab documentation template\n","content":"(**\n# The fslab documentation template\n\nThis template scaffolds the necessary folder structure for FSharp.Formatting \nand adds custom styles in the **fslab** theme. \n\nThe provided stylesheet was compiled from sass (before uploading the nuget package) and\nuses the [Bulma](https://bulma.io/) CSS framework instead of bootstrap which is used by FSharp.Formatting per default.\n\n#### Table of contents \n\n- [Installation](#Installation)\n- [Usage](#Usage)\n- [Quick content rundown](#Quick-content-rundown)\n- [Creating new content](#Creating-new-content)\n- [Customization options](#Customization-options)\n    - [Style sheet options](#Style-sheet-options)\n    - [Inclusion of sample content](#Inclusion-of-sample-content)\n    - [Create notebooks](#Create-notebooks)\n\n\n## Installation\n\nThis template is available as a _dotnet new_ template (from [nuget](https://www.nuget.org/packages/FsLab.DocumentationTemplate/)):\n\n\u0060\u0060\u0060no-highlight\ndotnet new -i FsLab.DocumentationTemplate\n\u0060\u0060\u0060\n\n## Usage\n\nIf not already present, create a _local tool manifest_ in the root of your project that you want to write documentation for:\n\n\u0060\u0060\u0060no-highlight\ndotnet new tool-manifest\n\u0060\u0060\u0060\n\nThen, still in the root of your project, run:\n\n\u0060\u0060\u0060no-highlight\ndotnet new fslab-docs\n\u0060\u0060\u0060\n\n## Quick content rundown:\n\nThe default template initializes the following folder structure when you initialize it in the root of your project.\n\nSee [further below](#Customization-options) for command line customization options of the template.\n\n\u003Cpre\u003E\ndocs\n\u2502   index.fsx\n\u2502   _template.html\n|   _template.ipynb\n|   \n\u2502   0_Markdown-Cheatsheet.md\n\u2502   1_fsharp-code-example.fsx\n\u2502   2_inline-references.fsx\n\u2502   3_notebooks.fsx\n|\n\u251C\u2500\u2500\u2500content\n\u2502   fsdocs-custom.css\n\u2502\n\u251C\u2500\u2500\u2500img\n\u2502       favicon.ico\n\u2502       logo.png\n\u2502\n\u2514\u2500\u2500\u2500reference\n        _template.html\n\u003C/pre\u003E\n\n- \u0060index.fsx\u0060 is the file you are reading just now. It contains the very content you are reading at the moment \nin a markdown block indicated by \u0060(** *)\u0060 guards. It will be rendered as the root \u0060index.html\u0060 file of your documentation.\n\n- \u0060_template.html\u0060 is the root html scaffold (sidebar to the left, script and style loading) where all of the individual docs will be injected into\n\n- \u00600_Markdown-Cheatsheet.md\u0060 is a adaption of [this markdown cheat sheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) that shows how to write markdown and showcases the rendered equivalents. It can also be viewed in all its glory [here](https://fslab.org/docs-template/0_Markdown-Cheatsheet.html).\n\n- \u00601_fsharp-code-example.fsx\u0060 is a script file that showcases the syntax highlighting style for F# snippets. It can also be viewed in all its glory [here](https://fslab.org/docs-template/1_fsharp-code-example.html).\n\n- \u00602_inline-references.fsx\u0060 is a script file that explains how to use inline references and use Plotly.NET for charting. It can also be viewed in all its glory [here](https://fslab.org/docs-template/2_inline-references.html).\n\n- \u00603_notebooks.fsx\u0060 is a script file that showcases conditional content in documentation and how to use that to create dotnet interactive notebooks besides your html documentation. It can also be viewed in all its glory [here](https://fslab.org/docs-template/3_notebooks.html).\n\n- \u0060fsdocs-custom.css\u0060 contains the custom styling that applies the fslab styles.\n\n - the \u0060img\u0060 folder contains the fslab logo and favicon. replace these files (with the same names) to youse sours\n\n - \u0060reference/_template.html\u0060 is a slightly adapted version of the template above for the API documentation\n\n## Creating new content\n\n- run \u0060dotnet fsdocs watch --eval\u0060 to spawn a watcher and dev server that hosts your docs on http://localhost:8901/ (You currently will still have to refresh the page when you make changes to files)\n\n- add a new .md or .fsx file to the \u0060content\u0060 directory (or into a new subdirectory there)\n\n- the sidebar title for the document will be either the file name or, if existent, the first level 1 header in the file\n\n- when writing a .fsx file, code will automatically become syntax-highlighted code snippets. \n\n- use \u0060(** \u003Cmarkdown here\u003E *)\u0060 to guard markdown sections in .fsx files\n\n- use \u0060(*** include-value:\u003Cval name\u003E ***)\u0060 to include the value of a binding\n\n- use \u0060(*** include-it ***)\u0060 to include the evaluation of the previous snippet block \n\nFor more info please refer to the [FSharp.Formatting documentation](http://fsprojects.github.io/FSharp.Formatting/).\n\n\n## Customization options\n\n### Style sheet options\n\n\u0060\u0060\u0060no-highlight\n-s|--styles             Set the type of style content the template will initialize. For the sass file to work, you will have to download bulma\n\n        all             - sass file, compiled csss, and minified css\n\n        sass            - only include the sass file\n\n        minified        - only include the minified css file\n\n        css             - only include the compiled css file\n\n        Default:        css\n\u0060\u0060\u0060\n\n### Inclusion of sample content\n\n\u0060\u0060\u0060no-highlight\n-is|--include-samples   wether to include sample files in the generated content\n\n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n### Create notebooks\n\n\u0060\u0060\u0060no-highlight\n-in|--include-notebooks  wether to include the notebook template file\n        \n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n*)\n"},{"uri":"/fsdocs-binding-bug-repro/test1.html","title":"This script creates the chart\n","content":"(***hide***)\n\n(***condition:prepare***)\n#r \u0022nuget: Deedle, 2.5.0\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n#r \u0022nuget: Newtonsoft.Json, 13.0.1\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharp.Data, 4.2.7\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: Deedle, 2.5.0\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n#r \u0022nuget: Newtonsoft.Json, 13.0.1\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharp.Data, 4.2.7\u0022\n#endif // IPYNB\n\n(**\n\n[![Binder]({{root}}images/badge-binder.svg)](https://mybinder.org/v2/gh/fslaborg/fslaborg.github.io/gh-pages?filepath=content/tutorials/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}images/badge-script.svg)]({{root}}content/tutorials/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}images/badge-notebook.svg)]({{root}}content/tutorials/{{fsdocs-source-basename}}.ipynb)\n\n\n# This script creates the chart\n\n_Summary:_ This tutorial demonstrates k means clustering with FSharp.Stats and how to visualize the results with Plotly.NET.\n\n## Introduction\n\nClustering methods can be used to group elements of a huge data set based on their similarity. Elements sharing similar properties cluster together and can be reported as coherent group.\nk-means clustering is a frequently used technique, that segregates the given data into k clusters with similar elements grouped in each cluster, but high variation between the clusters.\nThe algorithm to cluster a n-dimensional dataset can be fully described in the following 4 steps:\n\n  1. Initialize k n-dimensional centroids, that are randomly distributed over the data range.\n  2. Calculate the distance of each point to all centroids and assign it to the nearest one.\n  3. Reposition all centroids by calculating the average point of each cluster.\n  4. Repeat step 2-3 until convergence.\n\n### Centroid initiation\n\nSince the random initiation of centroids may influences the result, a second initiation algorithm is proposed (_cvmax_), that extract a set of medians from the dimension with maximum variance to initialize the centroids. \n\n### Distance measure\n\nWhile several distance metrics can be used (e.g. Manhattan distance or correlation measures) it is preferred to use Euclidean distance.\nIt is recommended to use a squared Euclidean distance. To not calculate the square root does not change the result but saves computation time.\n\n\u003Cimg style=\u0022max-width:75%\u0022 src=\u0022../../images/kMeans.png\u0022\u003E\u003C/img\u003E\n\n\u003Cbr\u003E\n\n\nFor demonstration of k-means clustering, the classic iris data set is used, which consists of 150 records, each of which contains four measurements and a species identifier.\n\n## Referencing packages\n\n\u0060\u0060\u0060fsharp\n// Packages hosted by the Fslab community\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n// third party .net packages \n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-preview.12\u0022\n#r \u0022nuget: FSharp.Data\u0022\n\u0060\u0060\u0060\n\n*)\n\n(**\n## Loading data\n*)\nopen FSharp.Data\nopen Deedle\n\n// Retrieve data using the FSharp.Data package and read it as dataframe using the Deedle package\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/iris.csv\u0022\nlet df = Frame.ReadCsvString(rawData)\n\ndf.Print()\n\n(*** include-output ***)\n\n(**\n\nLet\u0027s take a first look at the data with heatmaps using Plotly.NET. Each of the 150 records consists of four measurements and a species identifier. \nSince the species identifier occur several times (_Iris-virginica_, _Iris-versicolor_, and _Iris-setosa_), we create unique labels by adding the rows index to the species identifier.\n\n*)\nopen Plotly.NET\n\nlet colNames = [\u0022sepal_length\u0022;\u0022sepal_width\u0022;\u0022petal_length\u0022;\u0022petal_width\u0022]\n\n// isolate data as float [] []\nlet data = \n    Frame.dropCol \u0022species\u0022 df\n    |\u003E Frame.toJaggedArray\n\n//isolate labels as seq\u003Cstring\u003E\nlet labels = \n    Frame.getCol \u0022species\u0022 df\n    |\u003E Series.values\n    |\u003E Seq.mapi (fun i s -\u003E sprintf \u0022%s_%i\u0022 s i)\n\nlet dataChart = \n    Chart.Heatmap(data,colNames=colNames,rowNames=labels)\n    // required to fit the species identifier on the left side of the heatmap\n    |\u003E Chart.withMarginSize(Left=100.)\n    |\u003E Chart.withTitle \u0022raw iris data\u0022\n\n// required to fit the species identifier on the left side of the heatmap\n\n(*** condition: ipynb ***)\n#if IPYNB\ndataChart\n#endif // IPYNB\n\n(***hide***)\ndataChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**soos\ne\n*)"},{"uri":"/fsdocs-binding-bug-repro/test2.html","title":"test2","content":"(***hide***)\n\n(***condition:prepare***)\n#r \u0022nuget: FSharpAux, 1.1.0\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n#r \u0022nuget: FSharp.Data, 4.2.7\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: FSharpAux, 1.1.0\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n#r \u0022nuget: FSharp.Data, 4.2.7\u0022\n#endif // IPYNB\n\nopen Plotly.NET\n\n//This chart is named the same as the one in the test1.fsx script. The evaluation result below however, is the on from the other script, not the simple point chart that gets defined here.\n//renaming this leads to \u0022no value returned by any evaluator\u0022\nlet dataChart = Chart.Point([1,2])\n\n(*** condition: ipynb ***)\n#if IPYNB\ndataChart\n#endif // IPYNB\n\n(***hide***)\ndataChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"}]